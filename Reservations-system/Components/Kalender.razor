
<button class="btn btn-primary" @onclick="PreviusMonth">Forrige måned</button>
<button class="btn btn-primary" @onclick="NextMonth">Næste måned</button>

<h3>
    @Months[(ShowMonth.Month + monthCounter - 1)]
    @(ShowMonth.Year + yearCounter)
</h3>

<table>
    <tr>
        @foreach (var Day in WeekDays)
        {
            <th>@Day</th>
            dayCounter = 0;
        }
    </tr>

    @for (int i = 0; i < 6; i++)
    {
        <tr>
            @for (int j = 0; j < 7; j++)
            {
                Date1 = new DateTime(ShowMonth.Year + yearCounter, ShowMonth.Month + monthCounter, 1);

                if (Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Month == Date1.Month)
                {
                    Date2 = new DateTime(Date1.Year, Date1.Month, Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Day);

                    datePrinter = Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Day.ToString();

                    <td>
                        <BindDateTimeButton Title="@datePrinter"
                                            Css="@(Date2 == CurrentlyChosen ? "btn btn-primary" : "")"
                                            ThisDate="Date2"
                                            IsDisabled="IsInArray(Date2)"
                                            @bind-ChosenDate="ChosenDate">
                        </BindDateTimeButton>
                    </td>
                }
                else
                {
                    <td></td>
                }

                dayCounter++;
            }
        </tr>
    }
</table>
<button class="btn btn-primary" @onclick="UpdateChosenTimespan">Reserver dag</button>





@code {
    private string[] WeekDays = { " man ", " tir ", " ons ", " tor ", " fre ", " lør ", " søn " };
    private string[] Months = { "januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december" };

    private static DateTime ShowMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private static DateTime Date1;
    private static DateTime Date2;
    private static DateTime ChosenDate;

    private int dayCounter = 0;
    private int monthCounter = 0;
    private int yearCounter = 0;
    private string datePrinter;

    private void NextMonth()
    {
        monthCounter++;
        if (ShowMonth.Month + monthCounter > 12)
        {
            yearCounter++;
            monthCounter -= 12;
        }
    }

    private void PreviusMonth()
    {
        monthCounter--;
        if (ShowMonth.Month + monthCounter - 1 < 0)
        {
            yearCounter--;
            monthCounter += 12;
        }
    }

    public int DayOfWeek(DateTime Date)
    {
        return (int)Date1.DayOfWeek == 0 ? 7 : (int)Date1.DayOfWeek;
    }

    public bool IsInArray(DateTime ADate)
    {
        bool isInLst = false;
        foreach (DateTime RDate in ReservedDates)
        {
            if (ADate.Year == RDate.Year && ADate.Month == RDate.Month && ADate.Day == RDate.Day)
            {
                isInLst = true;
                break;
            }
        }

        return isInLst;
    }

    [Parameter]
    public List<DateTime> ReservedDates { get; set; }

    [Parameter]
    public DateTime CurrentlyChosen { get; set; }

    [Parameter]
    public DateTime ChosenDateP { get; set; }

    [Parameter]
    public EventCallback<DateTime> ChosenDatePChanged { get; set; }

    private async Task UpdateChosenTimespan()
    {
        await ChosenDatePChanged.InvokeAsync(ChosenDate);
    }
}
