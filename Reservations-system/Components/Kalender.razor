

<div class="centering-container">
    <div class="header">
        <button class="oi oi-caret-left" @onclick="PreviusMonth"> </button>
        <h4>
            @(ShowMonth.ToString("MMMM yyyy"))
        </h4>
        <button class="oi oi-caret-right" @onclick="NextMonth"></button>

    </div>



    <table>
        <tr>
            @foreach (var Day in WeekDays)
            {
                <th>@Day</th>
                dayCounter = 0;
            }
        </tr>

        @for (int i = 0; i < 6; i++)
        {
            <tr>
                @for (int j = 0; j < 7; j++)
                {
                    Date1 = new DateTime(ShowMonth.Year + yearCounter, ShowMonth.Month + monthCounter, 1);

                    if (Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Month == Date1.Month)
                    {
                        Date2 = new DateTime(Date1.Year, Date1.Month, Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Day);

                        datePrinter = Date1.AddDays(Date1.Day - DayOfWeek(Date1) + dayCounter).Day.ToString();

                        <td>
                            @*<BindDateTimeButton Title="@datePrinter"
                                                    Css="@(Date2 == CurrentlyChosen ? "btn btn-primary" : "")"
                                                    ThisDate="Date2"
                                                    IsDisabled="IsInArray(Date2, ReservedDates)"
                                                    @bind-ChosenDate="ChosenDate">
                                </BindDateTimeButton>*@
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }

                    dayCounter++;
                }
            </tr>
        }
    </table>

</div>






@code {
    private string[] WeekDays = { " man ", " tir ", " ons ", " tor ", " fre ", " lør ", " søn " };
    private string[] Months = { "januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december" };

    private static DateTime ShowMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private static DateTime Date1;
    private static DateTime Date2;
    private static DateTime ChosenDate;

    private int dayCounter = 0;
    private int monthCounter = 0;
    private int yearCounter = 0;
    private string datePrinter;

    public void SetDate()
    {

    }

    private void NextMonth()
    {
        monthCounter++;
        if (ShowMonth.Month + monthCounter > 12)
        {
            yearCounter++;
            monthCounter -= 12;
        }
    }

    private void PreviusMonth()
    {
        monthCounter--;
        if (ShowMonth.Month + monthCounter - 1 < 0)
        {
            yearCounter--;
            monthCounter += 12;
        }
    }

    private int DayOfWeek(DateTime Date)
    {
        return (int)Date.DayOfWeek == 0 ? 7 : (int)Date.DayOfWeek;
    }

    private bool IsInArray(DateTime ADate, List<DateTime> ReservedDates)
    {
        bool isInLst = false;
        foreach (DateTime RDate in ReservedDates)
        {
            if (ADate.Year == RDate.Year && ADate.Month == RDate.Month && ADate.Day == RDate.Day)
            {
                isInLst = true;
                break;
            }
        }

        return isInLst;
    }

    [Parameter]
    public List<DateTime> ReservedDates { get; set; }

    [Parameter]
    public DateTime CurrentlyChosen { get; set; }

    [Parameter]
    public DateTime ChosenDateP { get; set; }

    [Parameter]
    public EventCallback<DateTime> ChosenDatePChanged { get; set; }

    private async Task UpdateChosenTimespan()
    {
        await ChosenDatePChanged.InvokeAsync(ChosenDate);
    }
}
