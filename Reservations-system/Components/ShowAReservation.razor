@inject IJSRuntime JSRuntime

<h4>Gæsteinfo</h4>
@if (containerAdminHomePage.chosenReservation != null)
{
    <div>
        <p>
            Navn: @containerAdminHomePage.chosenReservation.Guest.Name
        </p>
        <p>
            TelefonNummer: @containerAdminHomePage.chosenReservation.Guest.PhoneNumber
        </p>
        <p>
            Mail: @containerAdminHomePage.chosenReservation.Guest.Mail
        </p>
    </div>
    <h4>
        Reservations info
    </h4>
    <div>
        <p>
            Reservations periode
        </p>
        <p>
            @containerAdminHomePage.chosenReservation.ReservationPeriod()
        </p>
    </div>
    @if (containerAdminHomePage.chosenReservation.Confirmed == false)
    {
        <p>
            <button class="btn btn-primary" @onclick="Confirm">Bekræft</button>
        </p>
    }

    <p>
        <button class="btn btn-primary" @onclick="DeleteReservation">@(containerAdminHomePage.chosenReservation.Confirmed == true ? "Slet" : "Annuller")</button>
        <button class="btn btn-primary" @onclick="(() => containerAdminHomePage.editMode = !containerAdminHomePage.editMode)">Rediger</button>
    </p>
}

@code {
    [CascadingParameter]
    public AdminHomePage containerAdminHomePage { get; set; } //Contains all admin home page functions and properties

    async Task DeleteReservation() //Alert user, remove reservation from the list, and de-selects a chosen reservation
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på at du vil slette denne reservation?"))
            return;
        containerAdminHomePage.RemoveReservationFromReservationList(containerAdminHomePage.chosenReservation);
        containerAdminHomePage.UpdateChosenReservation(null);
    }

    async Task Confirm() //Alerts user and confirms a reservation
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på at du vil bekræfte denne reservation?"))
            return;
        containerAdminHomePage.ConfirmReservation(containerAdminHomePage.chosenReservation);
    }


    //[Parameter]
    //public bool EditMode { get; set; }
    //
    //[Parameter]
    //public EventCallback<bool> EditModeChanged { get; set; }
    //
    //public async Task ChangeEditMode()
    //{
    //    await EditModeChanged.InvokeAsync(!EditMode);
    //}
    //
    //[Parameter]
    //public Reservation ShowThisRes { get; set; }
    //
    //[Parameter]
    //public EventCallback<Reservation> ShowThisResChanged { get; set; }
    //
    //[Parameter]
    //public List<Reservation> Reservations { get; set; }
    //
    //[Parameter]
    //public EventCallback<List<Reservation>> ReservationsChanged { get; set; }
}